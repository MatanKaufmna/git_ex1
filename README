# Git Basics (commit, diff, branches)

1.echo 1 > abc.txt
2.Red
3. git add abc.txt >> color now green
4.echo 2 >> abc.txt
5.color red. First time the file is untracked and in second time the file is familiar to the system and only
need to update changes to commit.
6.git diff
7.git diff --staged shows us only changes that happen between each commit. this is why we dont see nothing yet.
8. its print  unknown revision or path. Its print that the argument 'stage2' is ambiguous and we need to specified the rev or path.
9.git add abc.txt
10.nothing, all file are added to index.
11.git diff main
12.echo 3 >> abc.txt
13.No. 'git diff staged' only print the difference between each commit we did.
and git diff main show us the changes between the main branch and the staged area. it means that git diff main can also shows us
changes that not added to index yet.
14. git status shows us the files that recently add to index and need to be commit.
and also the changes that we did for same files and yet add to stage
15. git reset --hard // git reset

# Resolve conflicts

1.git branch
2.git checkout -b feature/lambda_migration
3.git merge feature/version1
4. merge using gui
5. gui action
   1. gui action done
   2.gui action done
   3.gui action done
   4.gui action done
   5.gui action done
6. all merge.  display - 'on branch feature/lambda_migration #changes to be committed: abc.txt'

# Cherry picking

1.git checkout -b feature/lambda_migration2
2. pycharm gui >>git tab etc.etc
3.
    1.
    2.
4. .env and config.json
5.yes the order is important we need to pick the right files in the correct flow of code for the changes to work correctly.


# Changes in working tree and switch branches

1. we in the right branch
2.echo hi > take.txt
3.git checkout dev
4. gui forced checkout
5. no it does not contain my changes
6. no its deleted from branch. force checkout is deleted any uncommitted change the we did.

# Reset

1.git checkout reset_question
2.
   1.git reset --soft HEAD~1
   2.git reset --mixed HEAD~1
   3.git reset --hard HEAD~1
   4.git revert HEAD~1
3.The HEAD@{1} is a special notation for the commit that HEAD used to be at prior to the original reset commit (1 change ago)


# Working with GitHub

1.In your GitHub account, create a new repository.
2.Add this repo as a remote (origin) to the local repo you've worked on along this exercise
3.git push origin dev , git push origin main
4.Copy and paste the link to your GitHub repo in the README answers file

https://github.com/alonitac/DevOpsMay22.git
